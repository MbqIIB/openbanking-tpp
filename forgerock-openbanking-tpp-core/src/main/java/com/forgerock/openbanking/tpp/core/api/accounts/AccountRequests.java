/**
 * Copyright 2019 ForgeRock AS.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.forgerock.openbanking.tpp.core.api.accounts;

import com.forgerock.openbanking.auth.model.ExchangeCodeResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletResponse;

@Api(value = "account request", description = "FRAccount1 requests API")
@RequestMapping("/open-banking/v1.1/accountrequests/")
public interface AccountRequests {

    @ApiOperation(value = "Initiate an account request",
            notes = "In order to use the account APIs, you will need to initiate an account request. This endpoint " +
                    "will allow you to trigger this flow.", response = String.class)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "The account request was successfully created. As a result, you will " +
                    "receive a URI where you will need to redirect the user to. (POST can't trigger a 302 :( )",
                    response = String.class),
            @ApiResponse(code = 400, message = "Bad Request", response = Void.class),
            @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
            @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
            @ApiResponse(code = 405, message = "Method Not Allowed", response = Void.class),
            @ApiResponse(code = 406, message = "Not Acceptable", response = Void.class),
            @ApiResponse(code = 429, message = "Too Many Requests", response = Void.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = Void.class) })
    @RequestMapping(value = "initiateAccountRequest", method = RequestMethod.POST)
    ResponseEntity<String> initiateAccountRequest(
            @ApiParam(value = "The bank ID", required = true)
            @RequestParam(value = "bankId") String bankId,

            @ApiParam(value = "The redirect uri where you want to be redirect at the end of a successful flow",
                    required = true)
            @RequestParam(value = "onSuccessRedirectUri") String onSuccessRedirectUri,

            @ApiParam(value = "The redirect uri where you want to be redirect at the end of a failure flow. " +
                    "Note that this uri needs to accept a parameter 'message'.",
                    required = true)
            @RequestParam(value = "onFailureRedirectUri") String onFailureRedirectUri
    );

    @ApiOperation(value = "Exchange the OIDC authorization code",
            notes = "This endpoint is called by the ASPSP-AS, when redirecting the authorization code responses " +
                    "to the OIDC client. UIs should not try to consumme this endpoint.",
            response = ExchangeCodeResponse.class)
    @ApiResponses(value = {
            @ApiResponse(code = 302, message = "The user is redirected to the successful uri or the failure one, " +
                    "depending of the situation that happened."),
    })
    @RequestMapping(value = "exchange_code", method = RequestMethod.GET)
    void exchangeCode(
            @RequestParam(value = "code") String code,
            @RequestParam(value = "id_token") String idToken,
            @RequestParam(value = "state") String state,
            @CookieValue(value = "aispContext", required = false) String aispContext,
            HttpServletResponse response);

}
