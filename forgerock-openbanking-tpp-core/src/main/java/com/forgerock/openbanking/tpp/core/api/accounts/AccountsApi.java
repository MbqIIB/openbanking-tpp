/**
 * Copyright 2019 ForgeRock AS.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.forgerock.openbanking.tpp.core.api.accounts;

import io.swagger.annotations.*;
import org.joda.time.DateTime;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import uk.org.openbanking.datamodel.account.*;

import static com.forgerock.openbanking.constants.OpenBankingConstants.ParametersFieldName.FROM_BOOKING_DATE_TIME;
import static com.forgerock.openbanking.constants.OpenBankingConstants.ParametersFieldName.TO_BOOKING_DATE_TIME;

@Api(value = "accounts", description = "Accounts APIs")
@RequestMapping("/open-banking/v1.1/accounts/")
public interface AccountsApi {

    @ApiOperation(value = "Get FRAccount1", notes = "Get an account", response = OBReadAccount1.class, authorizations = {
        @Authorization(value = "PSUOAuth2Security", scopes = {
            @AuthorizationScope(scope = "accounts", description = "Ability to read Accounts information")
            })
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "FRAccount1 resource successfully retrieved", response = OBReadAccount1.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 405, message = "Method Not Allowed", response = Void.class),
        @ApiResponse(code = 406, message = "Not Acceptable", response = Void.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = Void.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Void.class) })
    
    @RequestMapping(value = "/banks/{bankId}/accounts/{AccountId}",
        produces = { "application/json; charset=utf-8" }, 
        method = RequestMethod.GET)
    ResponseEntity<OBReadAccount1> getAccount(
            @ApiParam(value = "A unique identifier used to identify the bank.", required = true)
            @PathVariable("bankId") String bankId,

            @ApiParam(value = "A unique identifier used to identify the account resource.", required = true)
            @PathVariable("AccountId") String accountId,

            @ApiParam(value = "The AISP context received by the AISP core when creating an account request.",
                    required = true)
            @CookieValue("aispContext") String aispContext
    );


    @ApiOperation(value = "Get FRAccount1 Balances", notes = "Get Balances related to an account",
            response = OBReadBalance1.class, authorizations = {
        @Authorization(value = "PSUOAuth2Security", scopes = {
            @AuthorizationScope(scope = "accounts", description = "Ability to read Accounts information")
            })
    }, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "FRAccount1 Beneficiaries successfully retrieved", response = OBReadBalance1.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 405, message = "Method Not Allowed", response = Void.class),
        @ApiResponse(code = 406, message = "Not Acceptable", response = Void.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = Void.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Void.class) })

    @RequestMapping(value = "/banks/{bankId}/accounts/{AccountId}/balances",
        produces = { "application/json; charset=utf-8" },
        method = RequestMethod.GET)
    ResponseEntity<OBReadBalance1> getAccountBalances(
            @ApiParam(value = "A unique identifier used to identify the bank.", required = true)
            @PathVariable("bankId") String bankId,

            @ApiParam(value = "A unique identifier used to identify the account resource.", required = true)
            @PathVariable("AccountId") String accountId,

            @ApiParam(value = "The AISP context received by the AISP core when creating an account request.",
                    required = true)
            @CookieValue("aispContext") String aispContext);


    @ApiOperation(value = "Get FRAccount1 Beneficiaries", notes = "Get Beneficiaries related to an account",
            response = OBReadBeneficiary1.class, authorizations = {
        @Authorization(value = "PSUOAuth2Security", scopes = {
            @AuthorizationScope(scope = "accounts", description = "Ability to read Accounts information")
            })
    }, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "FRAccount1 Beneficiaries  successfully retrieved",
                response = OBReadBeneficiary1.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 405, message = "Method Not Allowed", response = Void.class),
        @ApiResponse(code = 406, message = "Not Acceptable", response = Void.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = Void.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Void.class) })

    @RequestMapping(value = "/banks/{bankId}/accounts/{AccountId}/beneficiaries",
        produces = { "application/json; charset=utf-8" },
        method = RequestMethod.GET)
    ResponseEntity<OBReadBeneficiary1> getAccountBeneficiaries(
            @ApiParam(value = "A unique identifier used to identify the bank.", required = true)
            @PathVariable("bankId") String bankId,

            @ApiParam(value = "A unique identifier used to identify the account resource.", required = true)
            @PathVariable("AccountId") String accountId,

            @ApiParam(value = "The AISP context received by the AISP core when creating an account request.",
                    required = true)
            @CookieValue("aispContext") String aispContext);


    @ApiOperation(value = "Get FRAccount1 Direct Debits", notes = "Get Direct Debits related to an account",
            response = OBReadDirectDebit1.class, authorizations = {
        @Authorization(value = "PSUOAuth2Security", scopes = {
            @AuthorizationScope(scope = "accounts", description = "Ability to read Accounts information")
            })
    }, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "FRAccount1 Direct Debits successfully retrieved", response = OBReadDirectDebit1.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 405, message = "Method Not Allowed", response = Void.class),
        @ApiResponse(code = 406, message = "Not Acceptable", response = Void.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = Void.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Void.class) })

    @RequestMapping(value = "/banks/{bankId}/accounts/{AccountId}/direct-debits",
        produces = { "application/json; charset=utf-8" },
        method = RequestMethod.GET)
    ResponseEntity<OBReadDirectDebit1> getAccountDirectDebits(
            @ApiParam(value = "A unique identifier used to identify the bank.", required = true)
            @PathVariable("bankId") String bankId,

            @ApiParam(value = "A unique identifier used to identify the account resource.", required = true)
            @PathVariable("AccountId") String accountId,

            @ApiParam(value = "The AISP context received by the AISP core when creating an account request.",
                    required = true)
            @CookieValue("aispContext") String aispContext);


    @ApiOperation(value = "Get FRAccount1 FRProduct1", notes = "Get FRProduct2 related to an account",
            response = OBReadProduct1.class, authorizations = {
        @Authorization(value = "PSUOAuth2Security", scopes = {
            @AuthorizationScope(scope = "accounts", description = "Ability to read Accounts information")
            })
    }, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "FRAccount1 FRProduct1 successfully retrieved", response = OBReadProduct1.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 405, message = "Method Not Allowed", response = Void.class),
        @ApiResponse(code = 406, message = "Not Acceptable", response = Void.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = Void.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Void.class) })

    @RequestMapping(value = "/banks/{bankId}/accounts/{AccountId}/product",
        produces = { "application/json; charset=utf-8" },
        method = RequestMethod.GET)
    ResponseEntity<OBReadProduct1> getAccountProduct(
            @ApiParam(value = "A unique identifier used to identify the bank.", required = true)
            @PathVariable("bankId") String bankId,

            @ApiParam(value = "A unique identifier used to identify the account resource.", required = true)
            @PathVariable("AccountId") String accountId,

            @ApiParam(value = "The AISP context received by the AISP core when creating an account request.",
                    required = true)
            @CookieValue("aispContext") String aispContext);


    @ApiOperation(value = "Get FRAccount1 Standing Orders", notes = "Get Standing Orders related to an account",
            response = OBReadStandingOrder1.class, authorizations = {
        @Authorization(value = "PSUOAuth2Security", scopes = {
            @AuthorizationScope(scope = "accounts", description = "Ability to read Accounts information")
            })
    }, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "FRAccount1 Standing Orders successfully retrieved",
                response = OBReadStandingOrder1.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 405, message = "Method Not Allowed", response = Void.class),
        @ApiResponse(code = 406, message = "Not Acceptable", response = Void.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = Void.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Void.class) })

    @RequestMapping(value = "/banks/{bankId}/accounts/{AccountId}/standing-orders",
        produces = { "application/json; charset=utf-8" },
        method = RequestMethod.GET)
    ResponseEntity<OBReadStandingOrder1> getAccountStandingOrders(
            @ApiParam(value = "A unique identifier used to identify the bank.", required = true)
            @PathVariable("bankId") String bankId,

            @ApiParam(value = "A unique identifier used to identify the account resource.", required = true)
            @PathVariable("AccountId") String accountId,

            @ApiParam(value = "The AISP context received by the AISP core when creating an account request.",
                    required = true)
            @CookieValue("aispContext") String aispContext);


    @ApiOperation(value = "Get FRAccount1 Transactions", notes = "Get transactions related to an account",
            response = OBReadTransaction1.class, authorizations = {
        @Authorization(value = "PSUOAuth2Security", scopes = {
            @AuthorizationScope(scope = "accounts", description = "Ability to read Accounts information")
            })
    }, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "FRAccount1 Transactions successfully retrieved", response = OBReadTransaction1.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 405, message = "Method Not Allowed", response = Void.class),
        @ApiResponse(code = 406, message = "Not Acceptable", response = Void.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = Void.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Void.class) })

    @RequestMapping(value = "/banks/{bankId}/accounts/{AccountId}/transactions",
        produces = { "application/json; charset=utf-8" },
        method = RequestMethod.GET)
    ResponseEntity<OBReadTransaction1> getAccountTransactions(
            @ApiParam(value = "A unique identifier used to identify the bank.", required = true)
            @PathVariable("bankId") String bankId,

            @ApiParam(value = "A unique identifier used to identify the account resource.", required = true)
            @PathVariable("AccountId") String accountId,

            @ApiParam(value = "The UTC ISO 8601 Date Time to filter transactions FROM  NB Time component is optional " +
                    "- set to 00:00:00 for just Date.   The parameter must NOT have a timezone set")
            @RequestParam(value = FROM_BOOKING_DATE_TIME, required = false) DateTime fromBookingDateTime,

            @ApiParam(value = "The UTC ISO 8601 Date Time to filter transactions TO  NB Time component is optional " +
                    "- set to 00:00:00 for just Date.   The parameter must NOT have a timezone set")
            @RequestParam(value = TO_BOOKING_DATE_TIME, required = false) DateTime toBookingDateTime,

            @ApiParam(value = "The AISP context received by the AISP core when creating an account request.",
                    required = true)
            @CookieValue("aispContext") String aispContext
    );

    @ApiOperation(value = "Get Accounts", notes = "Get a list of accounts", response = OBReadAccount1.class, authorizations = {
        @Authorization(value = "PSUOAuth2Security", scopes = {
            @AuthorizationScope(scope = "accounts", description = "Ability to read Accounts information")
            })
    }, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Accounts successfully retrieved", response = OBReadAccount1.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 405, message = "Method Not Allowed", response = Void.class),
        @ApiResponse(code = 406, message = "Not Acceptable", response = Void.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = Void.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Void.class) })

    @RequestMapping(value = "/banks/{bankId}/accounts",
        produces = { "application/json; charset=utf-8" },
        method = RequestMethod.GET)
    ResponseEntity<OBReadAccount1> getAccounts(
            @ApiParam(value = "A unique identifier used to identify the bank.", required = true)
            @PathVariable("bankId") String bankId,

            @ApiParam(value = "The AISP context received by the AISP core when creating an account request.",
                    required = true)
            @CookieValue("aispContext") String aispContext
    );
}
