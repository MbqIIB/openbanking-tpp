/**
 * Copyright 2019 ForgeRock AS. All Rights Reserved
 *
 * Use of this code requires a commercial software license with ForgeRock AS.
 * or with one of its affiliates. All use shall be exclusively subject
 * to such license between the licensee and ForgeRock AS.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.forgerock.openbanking.tpp.core.api.payment;

import com.forgerock.openbanking.auth.model.ExchangeCodeResponse;
import com.forgerock.openbanking.tpp.model.openbanking.v1_1.payment.FRPaymentRequest1;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletResponse;

@Api(value = "payment requests", description = "FRPaymentConsent requests API")
@RequestMapping("/open-banking/v1.1/payments/")
public interface PaymentRequests {

    @ApiOperation(value = "Initiate a payment request",
            notes = "In order to use the payment APIs, you will need to initiate an payment request. This endpoint " +
                    "will allow you to trigger this flow.", response = String.class)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "The payment request was successfully created. As a result, you will " +
                    "receive a URI where you will need to redirect the user to. (POST can't trigger a 302 :( )",
                    response = String.class),
            @ApiResponse(code = 400, message = "Bad Request", response = Void.class),
            @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
            @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
            @ApiResponse(code = 405, message = "Method Not Allowed", response = Void.class),
            @ApiResponse(code = 406, message = "Not Acceptable", response = Void.class),
            @ApiResponse(code = 429, message = "Too Many Requests", response = Void.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = Void.class) })
    @RequestMapping(value = "initiatePayment", method = RequestMethod.POST)
    ResponseEntity<String> initiatePayment(
            @ApiParam(value = "The payment request", required = true)
            @RequestBody FRPaymentRequest1 paymentRequest,

            @ApiParam(value = "The bank ID", required = true)
            @RequestParam(value = "bankId") String bankId,

            @ApiParam(value = "The redirect uri where you want to be redirect at the end of a successful flow",
                    required = true)
            @RequestParam(value = "onSuccessRedirectUri") String onSuccessRedirectUri,

            @ApiParam(value = "The redirect uri where you want to be redirect at the end of a failure flow. " +
                    "Note that this uri needs to accept a parameter 'message'.",
                    required = true)
            @RequestParam(value = "onFailureRedirectUri") String onFailureRedirectUri
    );

    @ApiOperation(value = "Exchange the OIDC authorization code",
            notes = "This endpoint is called by the ASPSP-AS, when redirecting the authorization code responses " +
                    "to the OIDC client. UIs should not try to consumme this endpoint.",
            response = ExchangeCodeResponse.class)
    @ApiResponses(value = {
            @ApiResponse(code = 302, message = "The user is redirected to the successful uri or the failure one, " +
                    "depending of the situation that happened."),
    })
    @RequestMapping(value = "exchange_code", method = RequestMethod.GET)
    void exchangeCode(
            @RequestParam(value = "code") String code,
            @RequestParam(value = "id_token") String idToken,
            @RequestParam(value = "state") String state,
            HttpServletResponse response);

}
